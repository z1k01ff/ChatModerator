import logging

from aiogram import Bot, F, Router, flags, types
from aiogram.enums import ChatType
from aiogram.filters import Command, CommandObject, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramBadRequest
from cachetools import TTLCache

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.rating import RatingFilter
from tgbot.filters.admin import AdminFilter
from tgbot.handlers.groups.casino import HOURS
from tgbot.middlewares.ratings_cache import RatingCacheReactionMiddleware
from tgbot.services.rating import (
    NEGATIVE_EMOJIS,
    POSITIVE_EMOJIS,
    reaction_rating_calculator,
)
from tgbot.services.cache_profiles import get_profile_cached
from tgbot.services.rating import change_rating


groups_rating_router = Router()
groups_rating_router.message.filter(F.chat.type == ChatType.SUPERGROUP)
groups_rating_router.message_reaction.middleware(RatingCacheReactionMiddleware())

cache = TTLCache(maxsize=10, ttl=60 * 60 * 24 * 7)


async def process_new_rating(
    rating_change: int,
    repo: RequestsRepo,
    helper_id: int,
    chat_id: int,
    mention_from: str,
    mention_reply: str,
) -> tuple[int, str] | None:
    previous_rating, new_rating = await change_rating(helper_id, chat_id, rating_change, repo)

    if rating_change > 0:
        text = (
            f"{mention_from} <b>–ø—ñ–¥–≤–∏—â–∏–≤ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ {rating_change} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b> {mention_reply} üò≥ \n"
            f"<b>–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}</b>"
        )
    else:
        text = (
            f"{mention_from} <b>–∑–Ω–∏–∑–∏–≤ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ {-rating_change} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É</b> {mention_reply} üò≥ \n"
            f"<b>–ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}</b>"
        )
    logging.info(text)

    milestones = [50, 100, 300, 600, 1000]
    for milestone in milestones:
        if previous_rating < milestone <= new_rating:
            if milestone == 1000:
                return new_rating, "üëë –ö–æ—Ä–æ–ª—å"
            elif milestone == 600:
                return new_rating, "üßô‚Äç‚ôÇÔ∏è –ß–∞–∫–ª—É–Ω"
            elif milestone == 300:
                return new_rating, "ü¶Ñ –ì–µ—Ç—å–º–∞–Ω"
            elif milestone == 100:
                return new_rating, "üêò –û—Ç–∞–º–∞–Ω"
            elif milestone == 50:
                return new_rating, "üê• –ö–æ–∑–∞–∫"


# @flags.override(user_id=362089194)
@groups_rating_router.message(Command("top"))
@flags.rate_limit(limit=0.5 * HOURS, key="top", chat=True)
async def get_top(m: types.Message, repo: RequestsRepo, bot, state: FSMContext):
    history_key = StorageKey(bot_id=bot.id, user_id=m.chat.id, chat_id=m.chat.id)
    state_data = await state.storage.get_data(key=history_key)
    previous_helpers = state_data.get("top", {})

    current_helpers = await repo.rating_users.get_top_by_rating(50)
    current_helpers_dict = {user_id: rating for user_id, rating in current_helpers}

    kings = []
    sorcerers = []
    hetmans = []
    otamans = []
    cossacs = []
    pig_herder = []

    for user_id, rating in current_helpers:
        profile = await get_profile_cached(state.storage, m.chat.id, user_id, bot)
        if not profile:
            continue

        previous_rating = previous_helpers.get(str(user_id), rating)
        change = rating - previous_rating
        change = (
            f"‚¨ÜÔ∏è {change}" if change > 0 else f"üîª {abs(change)}" if change < 0 else ""
        )
        helper_entry = (rating, change, profile)
        # Categorize helpers into leagues based on rating
        if rating >= 1000:
            kings.append(helper_entry)
        elif 600 <= rating < 1000:
            sorcerers.append(helper_entry)
        elif 300 <= rating < 600:
            hetmans.append(helper_entry)
        elif 100 <= rating < 300:
            otamans.append(helper_entry)
        elif 50 <= rating <= 100:
            cossacs.append(helper_entry)
        elif len(pig_herder) < 10:
            pig_herder.append(helper_entry)

    await state.storage.update_data(key=history_key, data={"top": current_helpers_dict})

    def format_league(league, league_name, emoji):
        if not league:
            return ""
        formatted_entries = "\n".join(
            [
                f"<b>{number}) {emoji} " f"{profile} ( {rating} ) {change}</b>"
                for number, (rating, change, profile) in enumerate(league, 1)
            ]
        )
        return f"<blockquote expandable><b>{league_name}:</b>\n{formatted_entries}</blockquote>"

    leagues = [
        (kings, "–ö–æ—Ä–æ–ª—ñ", "üëë"),
        (sorcerers, "–ß–∞–∫–ª—É–Ω–∏", "üßô‚Äç‚ôÇÔ∏è"),
        (hetmans, "–ì–µ—Ç—å–º–∞–Ω–∏", "ü¶Ñ"),
        (otamans, "–û—Ç–∞–º–∞–Ω–∏", "üêò"),
        (cossacs, "–ö–æ–∑–∞–∫–∏", "üê•"),
        (pig_herder, "–°–≤–∏–Ω–æ–ø–∞—Å–∏", "üë©‚Äçüåæ"),
    ]

    text = "\n".join(filter(bool, [format_league(*league_info) for league_info in leagues]))

    # - <b>üëë–ö–æ—Ä–æ–ª—ñ</b>
    text += """
<b>–ü—Ä–∞–≤–∞ —Ö–µ–ª–ø–µ—Ä—ñ–≤:</b>
- <b>üëë–ö–æ—Ä–æ–ª—ñ</b> –º–æ–∂—É—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ç–∏—Ç—É–ª —Å–æ–±—ñ —ñ –≤—Å—ñ–º –Ω–∏–∂—á–µ —á–∞–∫–ª—É–Ω—ñ–≤.
- <b>üßô‚Äç‚ôÇÔ∏è–ß–∞–∫–ª—É–Ω–∏</b> –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /history, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—ñ —Ç–µ–º–∏ –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏—Å—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 200 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
- <b>ü¶Ñ–ì–µ—Ç—å–º–∞–Ω–∏</b> –º–æ–∂—É—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Å–æ–±—ñ, –≤—Å—ñ–º —Ö—Ç–æ –Ω–∏–∂—á–µ –û—Ç–∞–º–∞–Ω—ñ–≤ –∫–∞—Å—Ç–æ–º–Ω—ñ —Ç–∏—Ç—É–ª–∏.
- <b>üêò–û—Ç–∞–º–∞–Ω–∏</b> –º–æ–∂—É—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ñ —Ç–∏—Ç—É–ª–∏ —Ç—ñ–ª—å–∫–∏ —Å–æ–±—ñ.
- <b>üë©‚Äçüåæ–°–≤–∏–Ω–æ–ø–∞—Å–∏</b> –Ω–µ –º–æ–∂—É—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /ai

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
- –°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –¥–µ—è–∫—ñ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó –∑–±—ñ–ª—å—à—É—é—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ 1, –¥–µ—è–∫—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑–º–µ–Ω—à—É—é—Ç—å –Ω–∞ 3.
- –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–±—ñ
- –ó–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –±—ñ–ª—å—à–µ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
- –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —á–∞—Å—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –æ–¥–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

<b>–í–∏–≥—Ä–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–Ω–∞ –≤ /casino:</b>
"""
    await m.answer(text, disable_notification=True)


@groups_rating_router.message_reaction(
    or_f(
        F.new_reaction[0].emoji.in_(POSITIVE_EMOJIS),
        F.old_reaction[0].emoji.in_(POSITIVE_EMOJIS),
    ),
)
@groups_rating_router.message_reaction(
    or_f(
        F.new_reaction[0].emoji.in_(NEGATIVE_EMOJIS),
        F.old_reaction[0].emoji.in_(NEGATIVE_EMOJIS),
    ),
    RatingFilter(rating=50),
)
@flags.override(user_id=362089194)
@flags.rate_limit(limit=180, key="rating", max_times=5)
async def add_reaction_rating_handler(
    reaction: types.MessageReactionUpdated,
    repo: RequestsRepo,
    bot: Bot,
    helper_id: int,
):
    rating_change = await reaction_rating_calculator(
        reaction, repo, helper_id, reaction.user.id
    )
    if not helper_id or helper_id == reaction.user.id:
        logging.info(
            f"User {reaction.user.id} tried to rate message {reaction.message_id} "
            f"but the message is not found in the database"
        )
        return
    try:
        helper = await bot.get_chat_member(reaction.chat.id, helper_id)
    except TelegramBadRequest:
        return

    upgraded = await process_new_rating(
        rating_change,
        repo,
        helper_id,
        reaction.chat.id,
        reaction.user.mention_html(reaction.user.first_name),
        helper.user.mention_html(helper.user.first_name),
    )
    if upgraded:
        new_rating, title = upgraded
        await bot.send_message(
            reaction.chat.id,
            f"üéâ –í—ñ—Ç–∞—î–º–æ {helper.user.mention_html(helper.user.first_name)}! –î–æ—Å—è–≥–Ω—É—Ç–∏–π —Ä—ñ–≤–µ–Ω—å: {title}! üéâ",
        )


@groups_rating_router.message(
    Command("topup"),
    F.from_user.id == 362089194,
    F.reply_to_message.from_user.id.as_("target_id"),
)
async def topup_user(message: types.Message, target_id: int, repo: RequestsRepo):
    await repo.rating_users.increment_rating_by_user_id(target_id, message.chat.id, 100)
    await message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ –Ω–∞ 100")


@groups_rating_router.message(Command("rating"))
async def get_user_rating(m: types.Message, repo: RequestsRepo, bot, state: FSMContext):
    target = m.reply_to_message.from_user if m.reply_to_message else m.from_user
    target_id = target.id

    current_rating = await repo.rating_users.get_rating_by_user_id(target_id, m.chat.id)
    if current_rating is None:
        await m.reply("–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    # Assume we have a function to get the previous rating and update it
    previous_rating, _ = await get_and_update_previous_rating(
        bot, state, target_id, current_rating
    )

    # Calculate rating change
    rating_change = current_rating - previous_rating

    # Determine the user's title
    title = determine_user_title(current_rating)

    change_text = (
        f" (‚¨ÜÔ∏è {rating_change})"
        if rating_change > 0
        else f" (üîª {abs(rating_change)})"
        if rating_change != 0
        else ""
    )

    await m.reply(
        f"–†–µ–π—Ç–∏–Ω–≥: {current_rating}{change_text}\n{target.full_name}: {title}"
    )


@groups_rating_router.message(Command("wipe"), F.from_user.id == 362089194)
async def wipe_user_rating(m: types.Message, repo: RequestsRepo):
    await repo.rating_users.wipe_ratings()
    await m.reply("–†–µ–π—Ç–∏–Ω–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±—É–ª–æ –æ—á–∏—â–µ–Ω–æ.")


def determine_user_title(rating):
    if rating >= 1000:
        return "üëë –ö–æ—Ä–æ–ª—å"
    elif rating >= 600:
        return "üßô‚Äç‚ôÇÔ∏è –ß–∞–∫–ª—É–Ω"
    elif rating >= 300:
        return "ü¶Ñ –ì–µ—Ç—å–º–∞–Ω"
    elif rating >= 100:
        return "üêò –û—Ç–∞–º–∞–Ω"
    elif rating >= 50:
        return "üê• –ö–æ–∑–∞–∫"
    else:
        return "üë©‚Äçüåæ –°–≤–∏–Ω–æ–ø–∞—Å"


async def get_and_update_previous_rating(
    bot: Bot, state: FSMContext, user_id: int, current_rating: int
):
    history_key = StorageKey(bot_id=bot.id, user_id=user_id, chat_id=user_id)
    state_data = await state.storage.get_data(key=history_key)
    previous_rating = state_data.get("previous_rating", current_rating)
    # Update the previous rating to the current one for next time
    await state.storage.update_data(
        key=history_key, data={"previous_rating": current_rating}
    )
    return previous_rating, current_rating - previous_rating

@groups_rating_router.message(Command("setrating"), AdminFilter())
async def set_user_rating(message: types.Message, command: CommandObject, repo: RequestsRepo):
    if not message.reply_to_message:
        await message.reply("–¶—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    args = command.args
    if not args:
        await message.reply("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setrating [–Ω–æ–≤–∏–π_—Ä–µ–π—Ç–∏–Ω–≥]")
        return
    try:
        new_rating = int(args)
    except ValueError:
        await message.reply("–ù–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞—î –±—É—Ç–∏ –¥—ñ–π—Å–Ω–∏–º —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º.")
        return
    target_user = message.reply_to_message.from_user
    await repo.rating_users.update_rating_by_user_id(target_user.id, new_rating)
    
    new_title = determine_user_title(new_rating)
    
    await message.reply(f"–†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user.full_name} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_rating}.\n–ù–æ–≤–µ –∑–≤–∞–Ω–Ω—è: {new_title}")
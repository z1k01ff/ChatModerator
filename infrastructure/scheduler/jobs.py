from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from aiogram.fsm.storage.redis import RedisStorage
from sqlalchemy.ext.asyncio import async_sessionmaker
import time
import logging

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.services.cache_profiles import get_profile_cached
async def apply_rating_inflation(bot: Bot, session_pool: async_sessionmaker, storage: RedisStorage):
    logging.info("–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑–∞–≤–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–ª—è—Ü—ñ—ó —Ä–µ–π—Ç–∏–Ω–≥—É")
    
    current_time = int(time.time())
    reduced_ratings = []
    
    async with session_pool() as session:
        repo = RequestsRepo(session)
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —á–∞—Ç–∏, –¥–µ —î –±–æ—Ç
        bot_chats = await repo.rating_users.get_bot_chats() 
        
        for chat_id in bot_chats:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç—É
            top_users = await repo.rating_users.get_top_by_rating_for_chat(chat_id, 50) 
            
            chat_reduced_ratings = []
            for user_id, current_rating in top_users:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –±—É–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–º —É —Ü—å–æ–º—É —á–∞—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å
                last_activity_key = f"user_activity:{chat_id}:{user_id}"
                last_activity = await storage.redis.get(last_activity_key)
                
                if not last_activity or (current_time - int(last_activity)) >= 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 1 –¥–µ–Ω—å
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é: –∑–Ω–∏–∂—É—î–º–æ –Ω–∞ 1% –∞–±–æ –º—ñ–Ω—ñ–º—É–º –Ω–∞ 1 –ø—É–Ω–∫—Ç
                    deduction = max(int(current_rating * 0.03), 1)
                    new_rating = max(current_rating - deduction, 0)  # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —Å—Ç–∞–Ω–µ –≤—ñ–¥'—î–º–Ω–∏–º
                    
                    await repo.rating_users.update_rating_by_user_id_for_chat(user_id, chat_id, new_rating)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    user_profile = await get_profile_cached(storage, chat_id, user_id, bot)
                    
                    if user_profile:
                        chat_reduced_ratings.append((user_profile, current_rating, new_rating))
                        logging.info(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é —Ä–µ–π—Ç–∏–Ω–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_profile} –≤ —á–∞—Ç—ñ {chat_id}. –°—Ç–∞—Ä–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}, –ù–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}")
                    else:
                        logging.info(f"–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é —Ä–µ–π—Ç–∏–Ω–≥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤ —á–∞—Ç—ñ {chat_id}. –°—Ç–∞—Ä–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}, –ù–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}. –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                else:
                    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –±—É–≤ –∞–∫—Ç–∏–≤–Ω–∏–º —É —á–∞—Ç—ñ {chat_id}. –Ü–Ω—Ñ–ª—è—Ü—ñ—è –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞. –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}")
            
            if chat_reduced_ratings:
                reduced_ratings.append((chat_id, chat_reduced_ratings))

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = "üìâ –©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é —Ä–µ–π—Ç–∏–Ω–≥—É üìâ\n\n"
    for chat_id, chat_reduced_ratings in reduced_ratings:
        chat_name = await get_chat_name(bot, chat_id)
        message += f"–ß–∞—Ç: {chat_name}\n"
        message += "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑—ñ –∑–Ω–∏–∂–µ–Ω–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º (–¢–æ–ø 40):\n"
        for user_profile, old_rating, new_rating in sorted(chat_reduced_ratings, key=lambda x: x[2], reverse=True)[:40]:
            message += f"{user_profile}: {old_rating} ‚Üí {new_rating} (-{old_rating - new_rating})\n"
        message += "\n"

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for chat_id, _ in reduced_ratings:
        try:
            await bot.send_message(chat_id, message)
            logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–≤—ñ—Ç –ø—Ä–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é –¥–æ —á–∞—Ç—É {chat_id}")
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ —ñ–Ω—Ñ–ª—è—Ü—ñ—é –¥–æ —á–∞—Ç—É {chat_id}: {str(e)}")

    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–ª—è—Ü—ñ—ó —Ä–µ–π—Ç–∏–Ω–≥—É")

async def get_chat_name(bot: Bot, chat_id: int) -> str:
    try:
        chat = await bot.get_chat(chat_id)
        return chat.title if chat.title else f"–ß–∞—Ç {chat_id}"
    except Exception as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —á–∞—Ç—É –¥–ª—è {chat_id}: {str(e)}")
        return f"–ß–∞—Ç {chat_id}"

def setup_rating_inflation_task(scheduler: AsyncIOScheduler, bot: Bot, session_pool: async_sessionmaker, storage: RedisStorage):
    scheduler.add_job(
        apply_rating_inflation,
        trigger=CronTrigger(hour=13, minute=0),  # Run every day at 13:00
        # For testing purposes, run every min
        # trigger=CronTrigger(minute="*/1"),
        args=[bot, session_pool, storage],
        id='rating_inflation_task',
        replace_existing=True,
        # next_run_time=datetime.now() + timedelta(seconds=5),
    )
    logging.info("Rating inflation task scheduled")